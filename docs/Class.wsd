@startuml

title "Kvaser CANLib Wrapper Library's Class diagram"

package API{

    class KPortControlUI<<boundary>>{
        +Button OpenBtn
        +Button CloseBtn
        +ComboBox ChannelCombo
        -void RegisterPorts()
        -int SelectBitrate()
        +Event PortOpened
        +Event PortClosed
    }

    class KvaserControl<< (S, #AAAA00) Singleton>>{
        -int HandleNo
        +bool IsOpened
        +bool IsMonitoring
        
        +bool SendMessage(Frame)
        +bool SendAndWait(ICommand)
    }

    entity Frame<<Entity>>{
        +int CANID
        ~int Flags
        +int DLC
        +Byte[] Data
        +long Timestamp
        +bool IsError
        +bool IsRemote()
        +bool IsExtend()
        +void New()
        +void New(int iniVal)
        +void New(Frame source)
        +Frame Clone()
        +String ToCSV()
    }

    enum MsgFlags<<Flags>>{
        Remote
        Standard
        Extend
        WakeUp
    }

    abstract AbstractReceiver<<Service>>{
        +bool IsReceiving
        #{field}String RecvData(T key)
        -Dictionary<T, String> Buff
        -Queue<T> RecvDataID_q
        #T RecvDataID
        +Event OwnDataReceived
        +bool StartRecv()
        +bool StopRecv()
        #<<internal>>void ReceiveProccess(Frame)
        #{abstract}bool Parse(Frame)
        +void ClearBuff()
    }


    Interface ICommand<<Entity>>{
        +Frame SendMess
        +Frame RecvMess
        +CommandState State
        +bool Parse(Frame)
        +bool IsSuccessedSend()
        +bool IsTimeout()
    }

    Enum CommandState<<State>>{
        NotSend = 0
        Waiting
        RecvACK
        RecvNACK
        Canceled
        Timeout
    }

    KPortControlUI "1" -l-o "1" KvaserControl

    KvaserControl "1" -u- "0..*" ICommand
    KvaserControl "1" -l "1..*" Frame

    CommandState - ICommand
    Frame -* ICommand 
    Frame - MsgFlags 
}

package InternalModules{
    class BitRateConfigs<< (M, #FF7700) Module>>{
        ~BitRateConfig[] GetConfigs()
        ~Bitrates GetBitrate(int idx)
        ~String[] GetConfigStr()
    }

    entity BitrateConfig<<Entity>>{
        +String Description
        +Bitrates Bitrate
    }

    enum Bitrates{
        10Kbit/sec
        50Kbit/sec
        100Kbit/sec
        125Kbit/sec
        250Kbit/sec
        500Kbit/sec
        1Mbit/sec
    }

    class PortController<< (M, #FF7700) Module>>{
        -{field} Dictinary<int, PortParameter> Ports
        ~int HandleNo
        ~bool IsOpened
        ~bool HasPorts()
        ~void ScanPorts()
        ~String[] GetPortsInfo()
        ~List<PortParameter> GetPhysicalPorts()
        ~List<PortParameter> GetVirtualPorts()
        ~bool BusOnProcess(int channel, int bitrate)
        ~bool BusOff()
        -bool SetBusParam(int handle, int bitrate)
        -bool BusOn(int handleNo)
    }

    entity PortParameter{
        +int No
        +String Name
        +int SerialNo
        +bool IsVirtual
    }

    class RecvMonitor<< (M, #FF7700) Module>>{
        -Thread MonitoringThread
        -int HandleNo
        -bool IsOpened
        -Queue RawBuff
        ~bool IsMonitoring
        -bool MonitoringControlFlag
        -void MonitoringLoop()
        ~bool StartMonitoring()
        ~bool StopMonitoring()
        -bool ReadBus()
        -void ExcuteReceiveProcess(Frame)
        ~void ClearBuff()
    }

    class ReceiverManager<< (M, #FF7700) Module>>{
        ~HashSet<IReceiver> Receivers
        ~bool StartRecv(IReceiver)
        ~bool StopRecv(IReceiver)
        -void ClearReceivers()
        ~void CallReceiveProccess(Frame)
    }

        Interface IReceiver<<Service>>{
        void ReceiveProccess(Frame)
    }

    class MessageSender<< (M, #FF7700) Module>>{
        -int HandleNo
        -bool IsOpened
        ~bool CheckFormat(Frame)
        ~bool SendMessage(Frame)
        ~bool SendAndWait(ICommand)
    }

    RecvMonitor --> ReceiverManager
    MessageSender --> ReceiverManager
    
    PortController *-- PortParameter
    PortController --> BitRateConfigs

    BitRateConfigs *-- BitrateConfig
    BitrateConfig - Bitrates

}


KPortControlUI ---> PortController
KPortControlUI ----> BitRateConfigs

KvaserControl ---> PortController
KvaserControl *---> RecvMonitor
KvaserControl *---> MessageSender

AbstractReceiver --|> IReceiver
IReceiver <--o ReceiverManager

AbstractReceiver ---> ReceiverManager

@enduml